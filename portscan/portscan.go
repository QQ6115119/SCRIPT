package main

import (
	"flag"
	"fmt"
	"log"
	"net"
	"os"
	"os/exec"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"
)

func Ulimit() int64 {
	out, err := exec.Command("ulimit", "-n").Output()
	if err != nil {
		panic(err)
	}
	s := strings.TrimSpace(string(out))
	//log.Println("Open Files limit: ",s)
	i, err := strconv.ParseInt(s, 10, 64)
	if err != nil {
		panic(err)
	}
	return i
}

func ScanPort(ip string, port int, timeout time.Duration) {

	target := fmt.Sprintf("%s:%d", ip, port)
	conn, err := net.DialTimeout("tcp", target, timeout)
	if err != nil {
		e := err.Error()
		if strings.Contains(e, "too many open files") {
			//fmt.Println(e)
			mu.Lock()
			Count.fileCount += 1
			mu.Unlock()
			time.Sleep(500*time.Millisecond)
			ScanPort(ip, port, timeout) // TODO
		} else if strings.Contains(e, "i/o timeout") {
			mu.Lock()
			Count.timoutCount += 1
			mu.Unlock()
			//fmt.Println("timeout",e)
			if options.TimeoutRetry{
				time.Sleep(200*time.Millisecond)
				ScanPort(ip, port, timeout) // TODO
			}
		} else if strings.Contains(e, "connection refused"){
			mu.Lock()
			Count.refusedCount += 1
			mu.Unlock()
		}else{
			mu.Lock()
			Count.anotherErrCount += 1
			mu.Unlock()
			fmt.Println("Error: ",e)
			if options.OtherRetry{
				time.Sleep(200*time.Millisecond)
				ScanPort(ip, port, timeout) // TODO
			}
		}
		return
	}
	mu.Lock()
	Count.openCount += 1
	mu.Unlock()
	openList = append(openList, port)
	fmt.Println(port,"Open")
	conn.Close()
}


var Count struct {
	openCount int
	fileCount int
	timoutCount int
	refusedCount int
	anotherErrCount int
}
var mu sync.RWMutex

type Options struct {
	Threads int
	TimeoutRetry bool
	OtherRetry bool
	Timeout int
	IP string
}
var options = &Options{}

var openList[] int

func main() {
	Count.openCount = 0
	Count.fileCount = 0
	Count.timoutCount = 0
	Count.refusedCount = 0
	Count.anotherErrCount = 0

	wg:=&sync.WaitGroup{}

	flag.IntVar(&options.Threads, "t", 10240, "Number of threads")
	flag.BoolVar(&options.TimeoutRetry, "tretry", false, "Time out port retries (endless loop)")
	flag.BoolVar(&options.OtherRetry, "oretry", true, "Other error retries")
	flag.IntVar(&options.Timeout, "timeout", 2, "Timeout in seconds")
	flag.StringVar(&options.IP, "ip", "", "Target IP")
	flag.Parse()

	if options.IP == ""{
		fmt.Printf("Useage: %s -ip 127.0.0.1\n",os.Args[0])
		os.Exit(0)
	}
	log.Println("Open Files limit: ",Ulimit())
	fmt.Print("Tips: Increase the timeout while increasing the threads is better\n")
	workers := make(chan bool,options.Threads)

	var firstPorts= []int{
		1,100,1000,10000,10001,10002,10003,10004,10005,10009,1001,10010,10012,1002,10024,10025,10030,10035,1007,10082,1009,
		1010,1011,10162,10180,102,1021,10215,1022,1023,1024,10243,1025,10250,10255,1026,1027,1028,1029,1030,1031,1032,1033,
		10332,10333,1034,1035,1036,1037,1038,1039,104,1040,1041,1042,1043,1044,10443,1045,1046,1047,1048,1049,1050,1051,1052,
		1053,1054,1055,10554,1056,10566,1057,1058,1059,106,1060,1061,10616,10617,1062,10621,10626,10628,10629,1063,1064,1065,
		1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,10778,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,
		1088,1089,109,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,11,110,1100,11001,1102,1104,1105,1106,1107,1108,111,
		1110,1111,11110,11111,1112,1113,1114,1117,1119,1121,11211,1122,1123,1124,1126,113,1130,11300,1131,11310,1132,1137,
		11371,1138,1141,1145,1147,1148,1149,1151,1152,1154,1163,1164,1165,1166,1169,1174,1175,1177,1183,1185,1186,1187,119,
		1192,1194,11965,11967,1198,1199,1200,12000,1201,121,1212,1213,1214,1216,1217,12174,1218,12265,12300,1233,1234,12345,
		1236,1241,1244,1247,1248,125,1259,1260,1271,1272,1277,1287,1290,1296,12999,13,1300,1301,1309,1310,1311,1314,1322,1328,
		1334,1344,13456,135,1352,13579,13666,13720,13722,13782,13783,138,139,1400,14000,14147,1417,14238,14265,143,1433,1434,144,
		1443,14441,14442,14443,14534,1455,146,1461,1471,1494,15,1500,15000,15002,15003,15004,1501,1503,1505,1515,1521,1524,1533,
		1554,1556,15660,15742,1580,1583,1588,1594,1600,16000,16001,16010,16012,16016,16018,16030,16080,161,1610,16113,163,1641,1658,
		1666,1687,1688,16922,16923,16992,16993,17,1700,17000,1717,1718,1719,1720,1721,1723,1741,175,1755,1761,1777,1782,1783,17877,
		179,17988,18000,18001,1801,18040,1805,18080,18081,18086,18101,1812,18245,18246,18264,1830,1839,1840,1862,1863,1864,1875,1880,
		1883,18988,19,1900,1901,19101,1911,1914,19150,19283,19315,1935,19350,1947,1962,1967,1971,1972,1974,19780,19801,1984,19842,19888,
		199,1991,1998,1999,19999,20,2000,20000,20005,2001,2002,2003,20031,2004,2005,2006,2007,2008,2009,2010,2013,2020,2021,2022,20221,
		20222,2030,2033,20332,2034,2035,2038,2040,2041,2042,2043,2045,2046,2047,2048,2049,2051,2052,2053,20547,2055,2064,2065,2068,2077,
		2080,2082,20828,2083,2086,2087,20880,2095,2096,2099,21,2100,2103,2105,2106,2107,211,2111,2119,212,2121,2126,2135,2144,21571,2160,
		2161,2170,2179,2181,2190,2191,2196,22,2200,22105,222,2222,22222,2223,22335,2251,2252,2260,2288,22939,23,2301,23023,2306,2323,2332,
		23424,23502,2366,2375,2376,2379,2381,2382,2383,2393,2394,2396,2399,24,2401,2404,2406,2424,2443,24444,2455,2480,24800,2492,25,2500,
		25000,2501,25010,25105,2522,2525,254,255,25565,2557,256,25734,25735,259,26,2600,2601,2602,2604,2605,2607,2608,26214,2628,2638,264,
		26470,27000,2701,27015,27016,27017,2702,2710,2715,2717,2718,2725,27352,27353,27355,27356,27715,280,2800,28017,28080,2809,2811,28201,
		2869,2875,2909,2910,2920,2967,2968,29876,2998,29999,3,30,3000,30000,30001,3001,3002,3003,3005,3006,3007,301,3011,3013,3017,3030,3031,
		3052,306,3071,30718,3075,3077,30951,3097,31,31038,311,3128,31337,3168,32,3211,3221,32400,3260,3261,3268,3269,32768,32769,32770,32771,
		32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,3280,3283,3288,3299,33,3300,3301,3306,3307,3310,3311,
		3312,3322,3323,3324,3325,3333,33338,33354,3337,3351,3352,3367,3369,3370,3371,3372,3388,3389,33890,33899,3390,340,3404,3443,34567,34571,34572,
		34573,34599,3460,3476,3493,3517,3520,3522,3523,3524,3525,3527,3528,3531,3541,3542,3546,35500,3551,3580,36,3659,366,3689,3690,37,3703,37215,
		3737,3749,3766,37777,3780,3784,3790,38,3800,3801,3809,3814,3826,3827,3828,38292,3851,3869,3871,3878,3880,3889,389,3905,3914,3918,3920,3945,
		3971,3986,3995,3998,4,4000,40000,40001,4001,4002,4003,4004,4005,4006,40193,4022,4040,4045,406,4063,4064,407,40911,4111,4125,4126,4129,41511,
		4155,416,417,41795,42,4224,4242,425,42510,427,4279,42873,43,4300,4321,4343,4369,44176,443,4430,4433,444,4440,4443,4444,44442,44443,4445,4446,
		4449,445,44501,449,4505,4506,45100,4550,45554,4567,458,464,465,4660,4662,4664,4711,4712,4730,4782,4786,48080,481,4840,4842,4848,4880,4899,49,
		4900,4911,49151,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49163,49165,49167,49175,49176,49400,4949,497,4998,49999,500,5000,
		50000,50001,50002,50003,50006,5001,5002,5003,5004,5005,50050,5006,50060,5007,50070,50075,5009,50090,50100,50111,502,503,5030,50300,5033,50389,
		505,5050,50500,5051,5054,5060,5061,50636,5080,50800,5084,5087,51,5100,5101,5102,51103,51106,5111,512,5120,513,514,51493,515,5190,5200,5214,5221,
		5222,5225,5226,524,5258,52673,5269,5280,52822,52848,52869,5298,53,5357,540,5400,54045,5405,541,5414,5427,543,5431,5432,54328,544,5440,5443,545,
		548,5500,55055,55056,5510,554,5544,55442,555,5550,5555,55553,55555,5560,55600,5566,5577,5598,5601,563,5631,5633,564,5666,5672,56737,56738,5678,
		5679,5718,57294,5730,57797,5800,5801,5802,58080,5810,5811,5815,5820,5822,5825,5850,5859,5862,587,5877,5900,5901,5902,5903,5904,5906,5907,5910,
		5911,5915,5922,5925,593,5938,5950,5952,5959,5960,5961,5962,5963,5984,5985,5986,5987,5988,5989,5998,5999,6,6000,60001,6001,60010,6002,60020,
		6003,60030,6004,6005,6006,6007,6009,6025,60443,6059,6060,6068,6080,6100,6101,6103,6106,6112,6123,6129,61532,6156,616,61613,61616,617,61900,
		620,62078,625,631,63331,6346,636,6363,6379,6389,6443,646,64623,64680,64738,648,6488,65000,6502,6510,65129,65389,6543,6544,6547,6560,6565,
		6566,6567,6580,6581,6588,6590,6600,6646,666,6664,6665,6666,6667,6668,6669,667,668,6689,6692,6697,6699,67,6779,6780,6782,6788,6789,6792,
		683,6839,687,6881,6901,691,6969,6998,7,70,700,7000,7001,7002,7003,7004,7005,7007,7014,7019,7025,705,7070,7071,7077,7080,7100,7103,7106,
		711,714,7144,7145,7170,7171,7180,7187,7199,720,7200,7201,722,726,7272,7288,7401,7402,7435,7443,7474,7479,749,7493,7496,7512,7537,7547,
		7548,7625,7627,7634,765,7657,7676,771,7741,777,7776,7777,7778,7779,7780,7788,7800,783,787,789,79,7911,7920,7921,7937,7938,7999,80,800,
		8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,801,8010,8011,8020,8021,8022,8025,8030,8031,8040,8042,8045,8058,8060,8069,808,8080,
		8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,81,8100,8111,8112,8118,8123,8125,8126,
		8129,8138,8139,8140,8159,8161,8180,8181,8182,8192,8193,8194,82,8200,8222,8254,8290,8291,8292,83,8300,8332,8333,8334,8351,8377,8378,8383,
		8388,84,8400,8402,843,8443,8444,8480,85,8500,8529,8545,8546,8554,86,8600,8649,8651,8652,8654,8686,8701,873,876,8765,88,880,8800,8834,8873,
		888,8880,8881,8882,8883,8884,8885,8886,8887,8888,8889,8890,8899,89,898,8983,8994,8999,9,90,900,9000,9001,9002,9003,9009,901,9010,9011,902,
		903,9030,9040,9042,9050,9051,9071,9080,9081,9083,9090,9091,9099,9100,9101,9102,9103,911,9110,9111,912,9151,9191,9200,9207,9220,9290,9292,9295,
		9300,9306,9333,9334,9415,9418,9443,9444,9446,9485,9500,9502,9503,9527,9530,9535,9575,9593,9594,9595,9618,9653,9666,9668,9700,9711,98,9801,981,
		9864,9869,987,9870,9876,9877,9878,9898,99,990,9900,9917,992,9929,993,994,9943,9944,995,9968,9981,999,9997,9998,9999,
	}
	sort.Ints(firstPorts)
	set := make(map[int]bool)
	for _, value := range firstPorts{
		set[value] = true
	}
	var scanPorts []int
	scanPorts = append(scanPorts, firstPorts...)
	for i:=1;i<=65535;i++{
		if _, ok := set[i];!ok {
			scanPorts = append(scanPorts, i)
		}
	}

	for _,i:=range scanPorts{
		wg.Add(1)
		workers <- true
		go func (port int ,ip string, timeout time.Duration)  {
			defer func() {
				<- workers
				wg.Done()
			}()
			ScanPort(ip,port,timeout)

		}(i,options.IP,time.Duration(options.Timeout) * time.Second)
	}
	wg.Wait()
	fmt.Printf("\nOpen Count: %d\nTooManyFile Count: %d\nTimeout Count: %d\nRefuse Count: %d\nOther Error Count: %d\n\n",
		Count.openCount,Count.fileCount,Count.timoutCount,Count.refusedCount,Count.anotherErrCount)

	fmt.Printf("Nmap Command:\nsudo nmap --open -sS -sV -sC -p%s %s\n",strings.Replace(strings.Trim(fmt.Sprint(openList), "[]"), " ", ",", -1),options.IP)
}
